В целом IoC можно разделить на два подтипа: Dependency Lookup и Dependency Injection.

Поиск зависимостей (Dependency Lookup) — более традиционный подход, который должен быть знаком опытным Java-программистам.
При поиске зависимостей компонент должен найти ссылку на зависимость.
Это тот случай когда сам объект пытается найти зависимости.
ПО СУТИ ЭТО РАБОТА С ФАЙЛОМ CONTEXT.XML

Внедрение зависимостей (Dependency Injection) — это новый подход, более гибкий и простой в использовании, чем поиск зависимостей.
При внедрении зависимостей зависимости вводятся в компонент контейнером IoC. Компонент не знает и не заботится о том, как была создана зависимость.
Это когда свойство автоматически привязывается при инициализации экземпляра.
РАБОТА С АННОТАЦИЯМИ.

Поиск зависимостей имеет два распространенных типа:
 1. Dependency Pull — наиболее распространенный тип IoC.
При необходимости зависимости извлекаются из центрального реестра.
Для доступа к EJB (версии 2.1 или более ранней) мы использовали получение зависимостей через API JNDI для поиска компонента EJB.
 2. Контекстуальный поиск зависимостей (CDL) - аналогичен извлечению зависимостей.
Зависимости просматриваются в контейнере, управляющем ресурсом, а не в центральном реестре.

Поиск зависимостей имеет два распространенных типа:
 1. Dependency Pull — наиболее распространенный тип IoC.
При необходимости зависимости извлекаются из центрального реестра.
Для доступа к EJB (версии 2.1 или более ранней) мы использовали получение зависимостей через API JNDI для поиска компонента EJB.
 2. Контекстуальный поиск зависимостей (CDL) - аналогичен извлечению зависимостей.
Зависимости просматриваются в контейнере, управляющем ресурсом, а не в центральном реестре.

Внедрение зависимостей имеет три распространенных типа:
 1. Внедрение в конструктор - предоставляет зависимости класса в его конструкторе(ах).
Класс объявляет конструктор или набор конструкторов, принимающих его зависимости в качестве аргументов.
Контейнер IoC передает зависимости классу при его создании.
Внедрение в конструктор обычно используется для обязательных зависимостей, которые требуются классу.
Обычно это неизменяемые зависимости.
 2. Setter Injection - предоставляет зависимости класса, используя методы установки в стиле JavaBean.
Используя эти установщики, контейнер IoC может внедрить необходимые зависимости.
Инъекция сеттера обычно используется для необязательных зависимостей.
Это позволяет нам создавать изменяемые/реконфигурируемые объекты, которые допускают последующее повторное внедрение.

 3. Внедрение полей - выполняется с использованием аннотаций к полям.
Контейнер использует Reflection API для прямого доступа к полям.
Значения зависимостей вводятся непосредственно в поля класса, а не задаются косвенно через конструкторы или установщики.


ВНЕДРЕНИЕ ПРОТИВ ПОИСКА:
Какой из них нам следует использовать, если у нас есть выбор? Однозначно DI!
Использование DI не оказывает никакого влияния на код наших компонентов.
Когда мы используем DI, самое большее, что должны сделать наши классы, — это разрешить внедрение зависимостей.
С другой стороны, код извлечения зависимостей должен активно получать ссылку на реестр и взаимодействовать с ним для поиска зависимостей.
Использование CDL требует от наших классов реализации определенных интерфейсов и ручного поиска всех зависимостей.
При поиске наши классы всегда зависят от интерфейсов, определенных контейнером.
Еще одним недостатком DL является то, что очень сложно тестировать наши классы изолированно.
Используя инъекцию, протестировать наши компоненты легко.
Все, что нам нужно сделать, это предоставить зависимости, используя соответствующие конструкторы или установщики.


ПРЕИМУЩЕСТВА ВНЕДРЕНИЯ ЗАВИСИМОСТЕЙ:
Преимущества использования DI включают в себя:

 1. Уменьшение связующего кода - DI значительно сокращает объем кода, который нам нужно написать, чтобы склеить компоненты нашего приложения.
 2. Упрощенная конфигурация - DI упрощает настройку приложения. Мы можем использовать различные параметры для настройки внедряемых классов.
DI значительно упрощает замену одной реализации зависимости на другую.
 3. Единый репозиторий зависимостей - Когда мы используем традиционный подход к управлению зависимостями,
мы создаем экземпляры наших зависимостей (или просматриваем их в фабричных классах), где они необходимы внутри зависимого класса.
Это распределяет зависимости между несколькими классами. Изменение зависимостей становится проблематичным.
Когда мы используем DI, все общие зависимости обычно содержатся в одном месте (репозитории или файле конфигурации).
Это делает управление зависимостями более простым и менее подверженным ошибкам.
 4. Легче тестировать - правильно проектируя наши классы с учетом DI, становится легче заменять или вытеснять зависимости.
Это очень полезно для пробного тестирования.
 5. Лучший дизайн приложений - Проектирование для DI означает, что мы должны проектировать с учетом интерфейсов.
Все основные компоненты определяются как интерфейсы, а затем создаются конкретные реализации этих интерфейсов и соединяются вместе с помощью DI-контейнера.



РАЗНИЦА МЕЖДУ ДВУМЯ ПОДХОДАМИ:
Основное различие между этими двумя подходами заключается в том, «кто несет ответственность за получение зависимостей».
Обычно при DI (внедрении зависимостей) ваш компонент не знает о DI-контейнере, и зависимости появляются «автоматически»
(например, вы просто объявляете некоторые параметры установки/конструктора, и DI-контейнер заполняет их за вас).
В DL (поиске зависимостей) вам нужно конкретно запрашивать то, что вам нужно.
На практике это означает, что у вас есть зависимость от контекста и вы можете получить из него все, что вам нужно.

