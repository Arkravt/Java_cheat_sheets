Метод инициализации.
Для того чтобы вызвать метод инициализации есть несколько способов:
1. При помощи явного указания метода, это может быть любой метод который мы создали.
    В этом случае в конфигурационном файле xml обязательно нужно указать имя этого метода в свойстве "init-method".

2. При помощи реализации интерфейса InitializingBean и переопределения метода afterPropertiesSet().
    Метод afterPropertiesSet() будет служить в качестве метода инициализации.
    В этом случае в файле xml не нужно явно указывать какой метод будет служить для инициализации, spring сам поймет, какой метод будет вызываться.
    Метод afterPropertiesSet() вызывается после вызова сеттеров.

3. @PostConstruct - используется для обозначения метода, который должен быть выполнен сразу после создания объекта и завершения работы конструктора,
    но до того, как объект будет использован. Важно понимать, что этот метод выполняется только один раз во время жизненного цикла объекта.
    Основное преимущество использования @PostConstruct вместо инициализации в конструкторе заключается в том,
    что @PostConstruct гарантированно вызывается после того, как все зависимости были внедрены в бин.


Метод деструктуризации.
Обычно, этот метод может вызываться в том случае если был создан бин и в нём есть работа с ресурсами,
чтобы освободить эти ресурсы можно использовать этот метод.
Этот метод вызывается перед уничтожением бина.

Для того чтобы вызвать метод деструктуризации есть несколько способов:
1. При помощи явного указания метода, в нашем случае это метод destroyMethod().
    В этом случае обязательно нужно указать метод деструктуризации в xml файле. Пример №1 (ctx1).

2. При помощи реализации интерфейса DisposableBean и переопределения метода destroy(),
    который будет служить в качестве метода деструктуризации.
    В этом случае в файле xml не нужно явно указывать какой метод будет служить для деструктуризации. Пример №2 (ctx2).

3. @PreDestroy - метод, помеченный @PreDestroy, запускается только один раз, непосредственно перед тем, как Spring удалит наш компонент из контекста приложения.
    Целью этого метода должно быть освобождение ресурсов или выполнение других задач очистки, таких как закрытие соединения с базой данных,
    прежде чем компонент будет уничтожен.