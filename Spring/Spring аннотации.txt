1. @Component(<имя класса>) - если присутствует эта аннотация у класса это говорит о том, что этот класс будет использоваться в качестве бина.
Spring будет сканировать директорию которая указана в context.xml и искать там классы помеченные этой аннотацией для того,
чтобы создать бины.
В <имя класса> можно подставить имя, чтобы Spring искал класс c аннотацией @Component именно по этому имени.

2. @Autowired - эта та аннотация, которая используется для того, чтобы мы могли указать Spring, что он должен что-то внедрять.
А именно внедрять зависимость в то поле/метод/конструктор над которым он стоит.
Эта зависимость должна быть классом с аннотацией @Component, чтобы Spring мог создать бин для этой зависимости.
В последних версиях Spring над конструкторами не обязательно ставить эту аннотацию, спринг это делает автоматически,
соответственно те классы которые есть в конструкторе должны быть с аннотацией @Component.

3. @Value - используется на уровне параметра поля или метода/конструктора и указывает значение по умолчанию для затронутого аргумента.
Очень важно отметить, что аргумент, переданный аннотации @Value, может быть только String.
Spring преобразует значение в указанный тип, и присвоение будет выполнено без проблем, даже если мы передаем переменным String значение int или boolean.
Внедрение значений из файлов свойств с помощью аннотации @Value, вероятно, наиболее часто используется в реальных приложениях.
Мы будем использовать файл свойств по умолчанию для Spring Boot - application.properties, где мы можем определить переменные, к которым мы сможем обращаться позже:
пример: @Value("${car.brand:<значение по умолчанию>")
        private String brand;

4. @PropertySource(<путь к application.properties>) - применяется для класса.
Эта аннотация применяется для того, чтобы указать путь к файлу с параметрами не в файле context.xml, а прям над классом, с помощью аннотации.
Для того, что-бы считать параметры из файла нужно: в фигурных скобках указать имя параметра,
а через двоеточие указать значение по умолчанию если параметр в файле будет не найден.
@Value("${car.brand:<значение по умолчанию>")
private String brand;

5. @Qualifier(<имя/id класса>) - эту аннотацию можно использовать в поле или параметре в качестве квалификатора.
Аннотация @Qualifier позволяет уточнить имя бина, который надо внедрить.
Включив аннотацию @Qualifier вместе с именем конкретной реализации, которую мы хотим использовать,
мы можем избежать двусмысленности, когда Spring находит несколько bean-компонентов одного и того же типа.
Пример:
    public Car(@Qualifier("engineV6") Engine engine, @Value("${EngineTemp.car:0}") int engineTemp) {
        this.engine = engine;
        this.engineTemp = engineTemp;
    }
В параметре аннотации @Qualifier нужно указать имя/id класса на который мы хотим сослаться.
Если у аннотации @Component в параметре не указано <имя класса>, то у аннотации @Qualifier в параметр нужно передать имя
класса с маленькой буквы.

6. @Profile(<имя профиля>) - Профили Spring позволяют кастомизировать приложение для работы в различном окружении.
В зависимости от активного профиля можно инстанциировать различные реализации одного и того же бина,
а также присваивать различные значения свойствам приложения. Если Spring-бин имеет аннотацию @Profile,
он будет инстанциирован только если указанный в аннотации профиль соответствует какому-либо активному профилю.
В <имя профиля> указывается уникальное имя по которому будем обращаться к этому профилю.

7. @ComponentScan(<путь к сканируемой директории>) - Применяется для класса. При применении этой аннотации Spring будет
сканировать все классы которые находятся в том же пакете в которым находится класс с этой аннотацией и искать классы с аннотацией @Component для создания бинов.
Если в параметрах аннотации указать <путь к сканируемой директории>, то соответственно Spring будет сканировать указанную директорию.
Когда мы создаем new AnnotationConfigApplicationContext() в конструктор мы должны передать класс с аннотацией @ComponentScan,
чтобы Spring понимал какую директорию ему нужно сканировать.

8. @Configuration - это аннотация уровня класса, указывающая, что объект является источником определений компонента(класс стал классом конфигурации).
@Configuration классы объявляют bean-компоненты с помощью @Bean-аннотированных методов
Вызовы @Beanметодов @Configurationклассов также можно использовать для определения зависимостей между компонентами.
То-есть, класс помечен такой аннотацией будет указывать на то как будут создаваться другие бины.

9. @Bean(<имя>) - эта аннотация говорит, о том, что метод над которым она стоит предназначен для создания бина.
Если параметр <имя> не указано класс можно вызвать по дефолту используя имя метода или сам клас, пример: User.class.

10. @Lazy - эта аннотация говорит, о том, что, создание бина будет происходить лениво, то-есть бин не будет создаваться во время
создания контекста, а лишь тогда когда к нему будет обращение.






















